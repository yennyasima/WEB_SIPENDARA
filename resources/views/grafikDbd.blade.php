@extends('layouts.landingpage')
@section('title', 'SIPENDARA - GRAFIK')

@section('content')

    <button id="hamburger"
        class="fixed group p-2 space-y-2 hover:bg-slate-100 right-14 h-10 w-14 mt-0.5 z-30 bg-white rounded border border-slate-400">
        <div class="w-full h-1 bg-[#D95639]"></div>
        <div class="w-full h-1 bg-[#D95639]"></div>
        <div class="w-full h-1 bg-[#D95639]"></div>
        <div id="tooltip"
            class="absolute font-semibold text-center hidden group-hover:block p-2 bg-black bg-opacity-70 text-white top-12 left-0 w-full rounded">
            Filter</div>
    </button>
    <div id="filter"
        class="fixed right-10 border border-slate-200 z-30 top-40 rounded w-fit h-fit p-4 bg-white drop-shadow-md hidden">
        <div id="filter-kalurahan-tahun" class="flex flex-col w-64">
            <div class="flex justify-around">
                <div class="flex items-center space-x-2">
                    <input type="radio" id="radio-kecamatan" value="kecamatan" name="filter-type" class="focus:ring-0">
                    <label for="kecamatan" class="text-sm">Kecamatan</label>
                </div>
                <div class="flex items-center space-x-2">
                    <input type="radio" id="radio-kelurahan" value="kelurahan" name="filter-type" class="focus:ring-0"
                        checked>
                    <label for="kelurahan" class="text-sm">Kelurahan</label>
                </div>
            </div>

            <select id="filter-kecamatan" class="p-2 border border-slate-300 rounded w-full mt-4 hidden">
                <option selected disabled>Kecamatan</option>
                {{-- Kelurahan options is generated by JS --}}
            </select>

            <select id="filter-kelurahan" class="p-2 border border-slate-300 rounded w-full mt-4">
                <option selected disabled>Kelurahan</option>
                {{-- Kelurahan options is generated by JS --}}
            </select>
            <select id="filter-k-tahun" class="p-2 border border-slate-300 rounded disabled:bg-gray-200 w-full mt-4"
                disabled>
                <option selected disabled>Tahun</option>
                {{-- Year options is generated by JS --}}
            </select>

            <button id="btn-filter"
                class="w-full bg-[#D95639] text-white p-2 rounded mt-6 hover:bg-[#b84530] transition-colors duration-300 disabled:bg-[#bbbbbb]">Terapkan</button>
        </div>
    </div>
    <div class="flex mt-20 z-10 overflow-auto">
        @include('components.grafik.sideBarGraph')
        <div class="">
            <h1 id="title" class="font-bold text-2xl mb-4">Kasus DBD</h1>
            <div class=" space-x-2">
                <div style="width: 100vh; height: calc(100vh - 10rem)"
                    class="p-4 bg-white overflow-auto drop-shadow-lg rounded border border-slate-200">
                    <canvas id="chart" class="pb-3  overflow-auto"></canvas>
                </div>

            </div>
        </div>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"></script>
    <script>
        let currentChart;
        const title = document.getElementById('title')
        const hamburger = document.getElementById('hamburger');
        const filter = document.getElementById('filter');
        const btnFilter = document.getElementById('btn-filter');
        btnFilter.disabled = true;

        // data parameters
        const kasusDbdParam = document.getElementById('kasus-dbd')
        const kepadatanDbdParam = document.getElementById('kepadatan-dbd')
        const suhuDbdParam = document.getElementById('suhu-dbd')
        const kelembapanDbdParam = document.getElementById('kelembapan-dbd')
        const CurahHujanDbdParam = document.getElementById('curah-hujan-dbd')
        const SUHU = 'suhu';
        const KELEMBAPAN = 'kelembapan';
        const CURAH_HUJAN = 'curah_hujan';
        let selectedFaktorLingkungan = SUHU;

        const paramElements = [kasusDbdParam, kepadatanDbdParam, suhuDbdParam, kelembapanDbdParam, CurahHujanDbdParam];

        function setBoldTextTo(element) {
            paramElements.forEach(el => {
                if (el !== element) {
                    el.classList.remove('font-bold')
                } else {
                    el.classList.add('font-bold')
                }
            })
        }

        // DATA
        const baseDataDBD = {!! json_encode($dbdData) !!};
        const penyakitDbd = baseDataDBD.penyakit;
        const kepadatanDbd = baseDataDBD.kepadatanPenduduk;
        const faktorLingkunganDbd = baseDataDBD.faktorLingkungan;
        let selectedData = penyakitDbd;

        const currentYear = new Date().getFullYear().toString();
        const currentMonth = new Date().getMonth();
        const dbdButtonContainer = document.getElementById('dbd-container')

        const monthNames = ["Januari", "Februari", "Maret", "April", "Mei", "Juni",
            "Juli", "Agustus", "September", "Oktober", "November", "Desember"
        ];

        const FILTER_TYPE = {
            KELURAHAN: 'kelurahan',
            KECAMATAN: 'kecamatan',
        }

        const kecamatanDropdown = document.getElementById('filter-kecamatan');
        kecamatanDropdown.addEventListener('change', function() {
            const selectedKecamatan = this.value;

            tahunDropdown.disabled = false;
            tahunDropdown.value = 'Tahun';

            renderTahunDropdownOptionsBasedOn(FILTER_TYPE.KECAMATAN, selectedKecamatan);
            btnFilter.disabled = true
        })

        const tahunDropdown = document.getElementById('filter-k-tahun');
        tahunDropdown.addEventListener('change', function() {
            const selectedTahun = this.value;

            btnFilter.disabled = selectedTahun == 'Tahun';
        })

        const kelurahanDropdown = document.getElementById('filter-kelurahan');
        kelurahanDropdown.addEventListener('change', function() {
            const selectedKalurahan = this.value;

            tahunDropdown.disabled = false;
            tahunDropdown.value = 'Tahun';

            renderTahunDropdownOptionsBasedOn(FILTER_TYPE.KELURAHAN, selectedKalurahan);
            btnFilter.disabled = true
        });

        function renderTahunDropdownOptionsBasedOn(type, selectedEntity) {
            // remove previous options
            while (tahunDropdown.options.length > 1) {
                tahunDropdown.remove(1);
            }

            const options = []
            switch (type) {
                case FILTER_TYPE.KELURAHAN:
                    options.push(...selectedData.filter(data => data.kelurahan === selectedEntity).map(data => data.tanggal
                        .split('-')[0]));
                    break;
                case FILTER_TYPE.KECAMATAN:
                    options.push(...selectedData.filter(data => data.kecamatan === selectedEntity).map(data => data.tanggal
                        .split('-')[0]));
                    break;
                default:
                    break;
            }

            const optionsSet = new Set(options);

            Array.from(optionsSet).forEach(tahun => {
                const option = document.createElement('option');
                option.value = tahun;
                option.text = tahun;
                tahunDropdown.appendChild(option);
            });
        }

        // Handle hide and show kelurahan and kecamatan dropdowns
        const filterTypeRadioButtons = document.querySelectorAll('input[name="filter-type"]');
        filterTypeRadioButtons.forEach(radio => {
            radio.addEventListener('change', function() {
                const selectedType = this.value;
                if (selectedType === 'kelurahan') {
                    if (selectedData != kepadatanDbd) {
                        kelurahanDropdown.style.display = 'block';
                    }

                    kecamatanDropdown.style.display = 'none';
                    kecamatanDropdown.value = 'Kecamatan';
                } else {
                    if (selectedData != kepadatanDbd) {
                        kecamatanDropdown.style.display = 'block';
                    }

                    kelurahanDropdown.style.display = 'none';
                    kelurahanDropdown.value = 'Kelurahan';
                }
                tahunDropdown.value = 'Tahun';
                if (selectedData != kepadatanDbd) {
                    tahunDropdown.disabled = true;
                }

                btnFilter.disabled = true
            })
        })

        function getSelectedFilterType() {
            const checkedRadio = document.querySelector('input[name="filter-type"]:checked');
            return checkedRadio?.value;
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Render diagram untuk tahun saat ini
            if (kasusDbdParam.classList.contains('font-bold')) {
                kasusDbdParam.classList.remove('font-bold')
            } else {
                kasusDbdParam.classList.add('font-bold')
            }
            resetFilter()
            renderKalurahanDropdownOptions(selectedData)
            renderKecamatanDropdownOptions(selectedData)
        });

        function renderKalurahanDropdownOptions(selectedData) {
            const kalurahanList = new Set(selectedData.map(item => item.kelurahan));

            Array.from(kalurahanList).sort().forEach(kalurahan => {
                const option = document.createElement('option');
                option.value = kalurahan;
                option.textContent = kalurahan;
                kelurahanDropdown.appendChild(option);
            });
        }

        function renderKecamatanDropdownOptions(selectedData) {
            const kecamatanList = new Set(selectedData.map(item => item.kecamatan));

            Array.from(kecamatanList).sort().forEach(kecamatan => {
                const option = document.createElement('option');
                option.value = kecamatan;
                option.textContent = kecamatan;
                kecamatanDropdown.appendChild(option);
            });
        }

        function resetFilter() {
            const kelurahanFilterType = document.getElementById('radio-kelurahan');
            kelurahanFilterType.checked = true;
            const kecamatanFilterType = document.getElementById('radio-kecamatan');
            kecamatanFilterType.checked = false;
            kecamatanDropdown.style.display = 'none';

            while (kecamatanDropdown.options.length > 1) {
                kecamatanDropdown.remove(1);
            }

            while (kelurahanDropdown.options.length > 1) {
                kelurahanDropdown.remove(1);
            }

            while (tahunDropdown.options.length > 1) {
                tahunDropdown.remove(1);
            }
            tahunDropdown.value = 'Tahun';
            kelurahanDropdown.value = 'Kelurahan';
            kecamatanDropdown.value = 'Kecamatan';

            tahunDropdown.disabled = selectedData != kepadatanDbd;
            btnFilter.disabled = true;

            renderDiagram([], currentYear);
        }

        function getRandomColor() {
            const letters = '0123456789ABCDEF';
            let color = '#';
            for (let i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        hamburger.addEventListener('click', function() {
            if (filter.classList.contains('hidden')) {
                document.getElementById('tooltip').classList.remove('group-hover:block');
                filter.classList.remove('hidden');
            } else {
                filter.classList.add('hidden');
                document.getElementById('tooltip').classList.add('group-hover:block');
            }
        });

        // Fungsi untuk memfilter data berdasarkan tahun dan bulan
        kasusDbdParam.addEventListener('click', function() {
            title.innerHTML = 'Kasus DBD'
            selectedData = penyakitDbd

            kelurahanDropdown.style.display = 'block'

            resetFilter()
            setBoldTextTo(kasusDbdParam)

            renderKalurahanDropdownOptions(selectedData)
            renderKecamatanDropdownOptions(selectedData)
        })

        kepadatanDbdParam.addEventListener('click', function() {
            title.innerHTML = 'Kepadatan Penduduk'
            selectedData = kepadatanDbd

            kelurahanDropdown.style.display = 'none'
            kecamatanDropdown.style.display = 'none'

            resetFilter()
            setBoldTextTo(kepadatanDbdParam)

            renderTahunDropdownOptions()
        })

        function renderTahunDropdownOptions() {
            // remove previous options
            while (tahunDropdown.options.length > 1) {
                tahunDropdown.remove(1);
            }

            const options = new Set(
                selectedData.map(data =>
                    data
                    .tanggal
                    .split('-')[0]));

            Array.from(options).forEach(tahun => {
                const option = document.createElement('option');
                option.value = tahun;
                option.text = tahun;
                tahunDropdown.appendChild(option);
            });
        }

        suhuDbdParam.addEventListener('click', function() {
            title.innerHTML = 'Rata Rata Suhu'
            selectedData = faktorLingkunganDbd
            selectedFaktorLingkungan = SUHU

            kelurahanDropdown.style.display = 'block'

            resetFilter()
            setBoldTextTo(suhuDbdParam)

            renderKalurahanDropdownOptions(selectedData)
            renderKecamatanDropdownOptions(selectedData)
        })

        kelembapanDbdParam.addEventListener('click', function() {
            title.innerHTML = 'Rata Rata Kelembaban'
            selectedData = faktorLingkunganDbd
            selectedFaktorLingkungan = KELEMBAPAN

            kelurahanDropdown.style.display = 'block'

            resetFilter()
            setBoldTextTo(kelembapanDbdParam)

            renderKalurahanDropdownOptions(selectedData)
            renderKecamatanDropdownOptions(selectedData)
        })

        CurahHujanDbdParam.addEventListener('click', function() {
            title.innerHTML = 'Rata Rata Curah hujan'
            selectedData = faktorLingkunganDbd
            selectedFaktorLingkungan = CURAH_HUJAN

            kelurahanDropdown.style.display = 'block'

            resetFilter()
            setBoldTextTo(CurahHujanDbdParam)

            renderKalurahanDropdownOptions(selectedData)
            renderKecamatanDropdownOptions(selectedData)
        })

        btnFilter.addEventListener('click', function() {
            let filteredData = selectedData.filter(item => item.tanggal.split('-')[0] == tahunDropdown.value);
            const selectedFilterType = getSelectedFilterType()
            if (selectedData != kepadatanDbd) {
                if (selectedFilterType === FILTER_TYPE.KELURAHAN) {
                    filteredData = filteredData.filter(item => item.kelurahan == kelurahanDropdown.value);
                } else {
                    filteredData = filteredData.filter(item => item.kecamatan == kecamatanDropdown.value);
                }
            }

            renderDiagram(filteredData)
        })

        // Fungsi untuk membuat diagram chart
        function renderDiagram(filteredData) {
            if (currentChart) {
                currentChart.destroy();
            }

            const xValues = [];
            const yValues = []

            const selectedFilterType = getSelectedFilterType()

            if (selectedData == kepadatanDbd) {
                const xValuesSet = new Set(filteredData.map(item => selectedFilterType === FILTER_TYPE.KELURAHAN ? item
                    .kelurahan : item.kecamatan));
                xValues.push(...Array.from(xValuesSet));

                xValues.forEach(entity => {
                    const data = filteredData.filter(item => selectedFilterType === FILTER_TYPE.KELURAHAN ? item
                        .kelurahan == entity : item.kecamatan == entity).map(item => Number(item
                        .kepadatan));

                    const sum = data.reduce((acc, curr) => acc + curr, 0);

                    yValues.push(sum);
                })

            } else {
                xValues.push(...monthNames);

                for (let i = 0; i < monthNames.length; i++) {
                    const data = filteredData.filter(item => Number(item.tanggal.split('-')[1]) - 1 == i);
                    const sum = data.reduce((acc, curr) => acc + Number(
                        selectedData == penyakitDbd ? curr.kasus : selectedData == faktorLingkunganDbd ?
                        selectedFaktorLingkungan == SUHU ? curr
                        .suhu : selectedFaktorLingkungan == KELEMBAPAN ? curr.kelembapan : curr.curah_hujan : 0
                    ), 0);

                    if (data.length >= 2) {
                        if (selectedData == penyakitDbd) {
                            yValues.push(sum);
                        } else if (selectedData == faktorLingkunganDbd) {
                            const avg = parseFloat((sum / data.length).toFixed(2));
                            yValues.push(avg);
                        }

                    } else if (data.length < 2) {
                        yValues.push(sum);
                    } else {
                        yValues.push(0);
                    }
                }
            }


            const area = selectedFilterType === FILTER_TYPE.KELURAHAN ? 'Kelurahan' : 'Kecamatan'

            const section = selectedData == kepadatanDbd ? 'Kepadatan Penduduk' : selectedData == penyakitDbd ?
                'Kasus DBD' : selectedFaktorLingkungan == SUHU ? 'Suhu' : selectedFaktorLingkungan == KELEMBAPAN ?
                'Kelembaban' :
                'Curah Hujan';

            let diagramTitle = ''
            if (selectedData == kepadatanDbd && tahunDropdown.value !== 'Tahun') {
                diagramTitle = `Data ${section} Tahun ${tahunDropdown.value}`;
            } else if (tahunDropdown.value !== 'Tahun' && kelurahanDropdown.value !== 'Kelurahan' || kecamatanDropdown
                .value !==
                'Kecamatan') {
                const selectedArea = selectedFilterType === FILTER_TYPE.KELURAHAN ? kelurahanDropdown.value :
                    kecamatanDropdown
                    .value;
                    diagramTitle = `Data ${section} Per ${area} ${selectedArea} Tahun ${tahunDropdown.value}`;
            }


            const barColors = filteredData.map(() => getRandomColor());

            const ctx = document.getElementById('chart').getContext('2d');
            currentChart = new Chart(ctx, {
                type: "bar",
                data: {
                    labels: xValues.length !== 0 ? xValues : [''],
                    datasets: [{
                        backgroundColor: barColors,
                        data: yValues.length !== 0 ? yValues : []
                    }]
                },
                options: {
                    scales: {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                precision: 0
                            },
                            scaleLabel: {
                                display: true,
                                labelString: section,
                                fontSize: 14
                            }
                        }, ],
                        xAxes: [{
                            scaleLabel: {
                                display: true,
                                labelString: selectedData != kepadatanDbd ? "Bulan" : selectedFilterType ===
                                    FILTER_TYPE.KELURAHAN ? 'Kelurahan' : "Kecamatan",
                                fontSize: 14
                            },
                            ticks: {
                                autoSkip: false,
                                maxRotation: 90,
                            }
                        }]
                    },
                    layout: {
                        padding: {
                            top: 10,
                            bottom: 8,
                            left: 20,
                            right: 20
                        }
                    },
                    legend: {
                        display: false,
                        position: 'left',
                        labels: {
                            fontSize: 14,
                            boxWidth: 35
                        }
                    },
                    title: {
                        display: true,
                        text: diagramTitle,
                        fontSize: 18,
                    },
                    responsive: true,
                    maintainAspectRatio: false,
                    animation: {
                        duration: 1000,
                        easing: 'easeOutBounce'
                    },
                }
            });
        }
    </script>

@endsection
